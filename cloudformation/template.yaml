AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for S3 bucket and Lambda function

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      Tags:
        - Key: Name
          Value: cloudformation-s3

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-s3-role-cf
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: s3-processor-cf
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs16.x
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log("Hello from Lambda!");
            return {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!')
            };
          }
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Tags:
        - Key: Name
          Value: cloudformation-lambda

Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
